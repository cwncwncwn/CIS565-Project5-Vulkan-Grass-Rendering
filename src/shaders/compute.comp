#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define GRAVITY_ACCEL 5
#define WIND_STRENGTH 5.0f
#define WIND_FREQUENCY 2.0f
#define ORIENTATION_THRESHOLD 0.9f
#define MAX_DEPTH 30.f
#define ORIENT_CULLING 0
#define FRUSTUM_CULLING 0
#define DISTANCE_CULLING 1

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
layout(set = 2, binding = 0) buffer InputBlades {
    Blade blades[];
} inputBlades;

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades {
    Blade blades[];
} outputCulledBlades;

// 3. Write the total number of blades remaining
layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;
float noise( vec3 p ) {
    return fract(sin((dot(p, vec3(127.1, 311.7, 191.999)))) * 43758.5453);
}


vec3 applyWind(vec3 v0) {
    float noise = noise(vec3(v0.x * 0.5, totalTime * WIND_FREQUENCY, v0.z * 0.5));
    float sway = sin(noise * 6.28 + totalTime * WIND_FREQUENCY) * 0.5;
    vec3 displacement = vec3(1.0, 0.0, 0.0) * sway;
    return displacement  * sway * sin(totalTime * WIND_FREQUENCY) * 20.;
}

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    uint bladeIdx = gl_GlobalInvocationID.x;
    Blade currBlade = inputBlades.blades[bladeIdx];

    vec3 v0 = currBlade.v0.xyz;
    vec3 v1 = currBlade.v1.xyz;
    vec3 v2 = currBlade.v2.xyz;
    vec3 up = currBlade.up.xyz;

    float bladeDir = currBlade.v0.w;
    float height = currBlade.v1.w;
    float width = currBlade.v2.w;
    float stiffness = currBlade.up.w;

    // TODO: Apply forces on every blade and update the vertices in the buffer

    // Gravity
    vec4 D = vec4(0.0, -1.0, 0.0, GRAVITY_ACCEL);
    vec3 gE = normalize(D.xyz) * D.w;
    vec3 tanDir = normalize(vec3(cos(bladeDir), 0.0, sin(bladeDir)));
	vec3 f = normalize(cross(tanDir, up));
    vec3 gF = 0.25 * length(gE) * f;

    vec3 fGravity = gE + gF;

    // Recovery
    vec3 iv2 = v0 + up * height;
    vec3 fRecovery = (iv2 - v2) * stiffness;

    // Wind
    vec3 windDir = applyWind(v0);
    float fd = 1 - abs(dot(normalize(windDir), normalize(v2 - v0)));
    float fr = dot(v2 - v0, up) / height;
    vec3 fWind = windDir * fd * fr;

    v2 += (fGravity + fRecovery + fWind) * deltaTime;

    // validation
    v2 = v2 - up * min(dot(up, v2 - v0), 0.);
    float lproj = length(v2 - v0 - up * (dot(v2 - v0, up)));
    v1 = v0 + height * up * max(1. - lproj / height, 0.05 * max(lproj / height, 1.));
    float L0 = length(v2 - v0);
	float L1 = length(v2 - v1) + length(v1 - v0);
    float L = (2 * L0 + L1) / 3.0f;
    float r = height / L;
    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

	currBlade.v1.xyz = v1;
	currBlade.v2.xyz = v2;
	inputBlades.blades[gl_GlobalInvocationID.x] = currBlade;


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    bool culled = false;

    // Orientation Culling 
    #if ORIENT_CULLING
    vec3 dir_b = normalize((camera.view * vec4((tanDir), 0.0)).xyz);
    vec3 dir_c = normalize((camera.view * vec4((v0), 1.0)).xyz);
    culled = abs(dot(dir_b, dir_c)) > ORIENTATION_THRESHOLD;
    # endif

    // View Frustum Culling
    #if FRUSTUM_CULLING
    mat4 viewProj = camera.proj * camera.view;

    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    vec4 v0_clip = viewProj * vec4(v0, 1.0);
    vec4 m_clip = viewProj * vec4(m, 1.0);
    vec4 v2_clip = viewProj * vec4(v2, 1.0);

    float t = 0.01; 
    float p0 = v0_clip.w + t;
    float pm = m_clip.w + t;
    float p2 = v2_clip.w + t;

    bool v0_in_frust =  inBounds(v0_clip.x, p0) && inBounds(v0_clip.y, p0) && inBounds(v0_clip.z, p0);
    bool v2_in_frust =  inBounds(v2_clip.x, p2) && inBounds(v2_clip.y, p2) && inBounds(v2_clip.z, p2);
    bool m_in_frust = inBounds(m_clip.x, pm) && inBounds(m_clip.y, pm) && inBounds(m_clip.z, pm);
    
    culled = culled || !(v0_in_frust || m_in_frust);
    #endif
    
    // Distance Culling
    #if DISTANCE_CULLING
    const int n = 10;

    vec3 c = transpose(mat3(camera.view)) * -camera.view[3].xyz;
    float dproj = length(v0 - c - up * (dot(v0 - c, up)));
    bool distanceCull = bladeIdx % n < floor(n * (1.f - dproj / MAX_DEPTH));

    culled = culled || !distanceCull;
    #endif
    
    // Write to the output buffer
    if (!culled) {
        uint idx = atomicAdd(numBlades.vertexCount, 1);
        outputCulledBlades.blades[idx] = currBlade;
    }
}   
